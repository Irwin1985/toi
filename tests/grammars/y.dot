digraph y {
	edge [fontsize=10];
	node [shape=box,fontsize=10];
	orientation=landscape;
	rankdir=LR;
	/*
	margin=0.2;
	page="8.27,11.69"; // for A4 printing
	ratio=auto;
	*/

	q0 [label="0:\l  $accept -> . module $end\l  module -> . module_element\l  module -> . module module_element\l  module_element -> . import_directive\l  module_element -> . var_definition\l  module_element -> . function_definition\l  import_directive -> . IMPORT STRING SCOLON\l  var_definition -> . NUM COLON SYMBOL ASSIGN NUMBER SCOLON\l  var_definition -> . STRG COLON SYMBOL ASSIGN STRING SCOLON\l  var_definition -> . BOOL COLON SYMBOL ASSIGN TRUE SCOLON\l  var_definition -> . BOOL COLON SYMBOL ASSIGN FALSE SCOLON\l  function_definition -> . SYMBOL function_def_parameters statement_group\l"];
	q1 [label="1:\l  var_definition -> NUM . COLON SYMBOL ASSIGN NUMBER SCOLON\l"];
	q2 [label="2:\l  var_definition -> STRG . COLON SYMBOL ASSIGN STRING SCOLON\l"];
	q3 [label="3:\l  var_definition -> BOOL . COLON SYMBOL ASSIGN TRUE SCOLON\l  var_definition -> BOOL . COLON SYMBOL ASSIGN FALSE SCOLON\l"];
	q4 [label="4:\l  import_directive -> IMPORT . STRING SCOLON\l"];
	q5 [label="5:\l  function_definition -> SYMBOL . function_def_parameters statement_group\l  function_def_parameters -> . OPAREN fd_parameter_list CPAREN OPAREN fd_parameter_list CPAREN\l"];
	q6 [label="6:\l  $accept -> module . $end\l  module -> module . module_element\l  module_element -> . import_directive\l  module_element -> . var_definition\l  module_element -> . function_definition\l  import_directive -> . IMPORT STRING SCOLON\l  var_definition -> . NUM COLON SYMBOL ASSIGN NUMBER SCOLON\l  var_definition -> . STRG COLON SYMBOL ASSIGN STRING SCOLON\l  var_definition -> . BOOL COLON SYMBOL ASSIGN TRUE SCOLON\l  var_definition -> . BOOL COLON SYMBOL ASSIGN FALSE SCOLON\l  function_definition -> . SYMBOL function_def_parameters statement_group\l"];
	q7 [label="7:\l  module -> module_element . { SYMBOL IMPORT BOOL STRG NUM $end }\l"];
	q8 [label="8:\l  module_element -> import_directive . { SYMBOL IMPORT BOOL STRG NUM $end }\l"];
	q9 [label="9:\l  module_element -> var_definition . { SYMBOL IMPORT BOOL STRG NUM $end }\l"];
	q10 [label="10:\l  module_element -> function_definition . { SYMBOL IMPORT BOOL STRG NUM $end }\l"];
	q11 [label="11:\l  var_definition -> NUM COLON . SYMBOL ASSIGN NUMBER SCOLON\l"];
	q12 [label="12:\l  var_definition -> STRG COLON . SYMBOL ASSIGN STRING SCOLON\l"];
	q13 [label="13:\l  var_definition -> BOOL COLON . SYMBOL ASSIGN TRUE SCOLON\l  var_definition -> BOOL COLON . SYMBOL ASSIGN FALSE SCOLON\l"];
	q14 [label="14:\l  import_directive -> IMPORT STRING . SCOLON\l"];
	q15 [label="15:\l  function_def_parameters -> OPAREN . fd_parameter_list CPAREN OPAREN fd_parameter_list CPAREN\l  fd_parameter -> . { COMMA CPAREN }\l  fd_parameter -> . NUM COLON SYMBOL\l  fd_parameter -> . STRG COLON SYMBOL\l  fd_parameter -> . BOOL COLON SYMBOL\l  fd_parameter_list -> . fd_parameter\l  fd_parameter_list -> . fd_parameter COMMA fd_parameter_list\l"];
	q16 [label="16:\l  function_definition -> SYMBOL function_def_parameters . statement_group\l  statement_group -> . OCURLY statement_list CCURLY\l"];
	q17 [label="17:\l  module -> module module_element . { SYMBOL IMPORT BOOL STRG NUM $end }\l"];
	q18 [label="18:\l  var_definition -> NUM COLON SYMBOL . ASSIGN NUMBER SCOLON\l"];
	q19 [label="19:\l  var_definition -> STRG COLON SYMBOL . ASSIGN STRING SCOLON\l"];
	q20 [label="20:\l  var_definition -> BOOL COLON SYMBOL . ASSIGN TRUE SCOLON\l  var_definition -> BOOL COLON SYMBOL . ASSIGN FALSE SCOLON\l"];
	q21 [label="21:\l  import_directive -> IMPORT STRING SCOLON . { SYMBOL IMPORT BOOL STRG NUM $end }\l"];
	q22 [label="22:\l  fd_parameter -> NUM . COLON SYMBOL\l"];
	q23 [label="23:\l  fd_parameter -> STRG . COLON SYMBOL\l"];
	q24 [label="24:\l  fd_parameter -> BOOL . COLON SYMBOL\l"];
	q25 [label="25:\l  function_def_parameters -> OPAREN fd_parameter_list . CPAREN OPAREN fd_parameter_list CPAREN\l"];
	q26 [label="26:\l  fd_parameter_list -> fd_parameter . { CPAREN }\l  fd_parameter_list -> fd_parameter . COMMA fd_parameter_list\l"];
	q27 [label="27:\l  var_definition -> . NUM COLON SYMBOL ASSIGN NUMBER SCOLON\l  var_definition -> . STRG COLON SYMBOL ASSIGN STRING SCOLON\l  var_definition -> . BOOL COLON SYMBOL ASSIGN TRUE SCOLON\l  var_definition -> . BOOL COLON SYMBOL ASSIGN FALSE SCOLON\l  statement_group -> . OCURLY statement_list CCURLY\l  statement_group -> OCURLY . statement_list CCURLY\l  statement_list -> . statement\l  statement_list -> . statement statement_list\l  statement -> . var_definition\l  statement -> . var_assignment\l  statement -> . function_call\l  statement -> . if_statement\l  statement -> . while_statement\l  statement -> . for_statement\l  statement -> . switch_statement\l  statement -> . RETURN SCOLON\l  statement -> . statement_group\l  var_assignment -> . SYMBOL ASSIGN expression SCOLON\l  function_call -> . SYMBOL function_call_parameters SCOLON\l  if_statement -> . IF OPAREN boolean_expression CPAREN statement_group else_clause_list\l  if_statement -> . IF OPAREN boolean_expression CPAREN statement_group\l  while_statement -> . WHILE OPAREN boolean_expression CPAREN loop_statement_group\l  for_statement -> . FOR OPAREN var_assignment SCOLON boolean_expression SCOLON arith_expression CPAREN loop_statement_group\l  switch_statement -> . SWITCH OPAREN SYMBOL CPAREN OCURLY case_clause_list CCURLY\l  switch_statement -> . SWITCH OPAREN SYMBOL CPAREN OCURLY case_clause_list CCURLY else_clause\l"];
	q28 [label="28:\l  function_definition -> SYMBOL function_def_parameters statement_group . { SYMBOL IMPORT BOOL STRG NUM $end }\l"];
	q29 [label="29:\l  var_definition -> NUM COLON SYMBOL ASSIGN . NUMBER SCOLON\l"];
	q30 [label="30:\l  var_definition -> STRG COLON SYMBOL ASSIGN . STRING SCOLON\l"];
	q31 [label="31:\l  var_definition -> BOOL COLON SYMBOL ASSIGN . TRUE SCOLON\l  var_definition -> BOOL COLON SYMBOL ASSIGN . FALSE SCOLON\l"];
	q32 [label="32:\l  fd_parameter -> NUM COLON . SYMBOL\l"];
	q33 [label="33:\l  fd_parameter -> STRG COLON . SYMBOL\l"];
	q34 [label="34:\l  fd_parameter -> BOOL COLON . SYMBOL\l"];
	q35 [label="35:\l  function_def_parameters -> OPAREN fd_parameter_list CPAREN . OPAREN fd_parameter_list CPAREN\l"];
	q36 [label="36:\l  fd_parameter -> . { COMMA CPAREN }\l  fd_parameter -> . NUM COLON SYMBOL\l  fd_parameter -> . STRG COLON SYMBOL\l  fd_parameter -> . BOOL COLON SYMBOL\l  fd_parameter_list -> . fd_parameter\l  fd_parameter_list -> . fd_parameter COMMA fd_parameter_list\l  fd_parameter_list -> fd_parameter COMMA . fd_parameter_list\l"];
	q37 [label="37:\l  statement -> RETURN . SCOLON\l"];
	q38 [label="38:\l  if_statement -> IF . OPAREN boolean_expression CPAREN statement_group else_clause_list\l  if_statement -> IF . OPAREN boolean_expression CPAREN statement_group\l"];
	q39 [label="39:\l  while_statement -> WHILE . OPAREN boolean_expression CPAREN loop_statement_group\l"];
	q40 [label="40:\l  for_statement -> FOR . OPAREN var_assignment SCOLON boolean_expression SCOLON arith_expression CPAREN loop_statement_group\l"];
	q41 [label="41:\l  switch_statement -> SWITCH . OPAREN SYMBOL CPAREN OCURLY case_clause_list CCURLY\l  switch_statement -> SWITCH . OPAREN SYMBOL CPAREN OCURLY case_clause_list CCURLY else_clause\l"];
	q42 [label="42:\l  var_assignment -> SYMBOL . ASSIGN expression SCOLON\l  function_call -> SYMBOL . function_call_parameters SCOLON\l  function_call_parameters -> . OPAREN fc_parameter_list CPAREN OPAREN fc_parameter_list CPAREN\l"];
	q43 [label="43:\l  statement -> var_definition . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q44 [label="44:\l  statement -> statement_group . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q45 [label="45:\l  statement_group -> OCURLY statement_list . CCURLY\l"];
	q46 [label="46:\l  var_definition -> . NUM COLON SYMBOL ASSIGN NUMBER SCOLON\l  var_definition -> . STRG COLON SYMBOL ASSIGN STRING SCOLON\l  var_definition -> . BOOL COLON SYMBOL ASSIGN TRUE SCOLON\l  var_definition -> . BOOL COLON SYMBOL ASSIGN FALSE SCOLON\l  statement_group -> . OCURLY statement_list CCURLY\l  statement_list -> . statement\l  statement_list -> statement . { CCURLY }\l  statement_list -> . statement statement_list\l  statement_list -> statement . statement_list\l  statement -> . var_definition\l  statement -> . var_assignment\l  statement -> . function_call\l  statement -> . if_statement\l  statement -> . while_statement\l  statement -> . for_statement\l  statement -> . switch_statement\l  statement -> . RETURN SCOLON\l  statement -> . statement_group\l  var_assignment -> . SYMBOL ASSIGN expression SCOLON\l  function_call -> . SYMBOL function_call_parameters SCOLON\l  if_statement -> . IF OPAREN boolean_expression CPAREN statement_group else_clause_list\l  if_statement -> . IF OPAREN boolean_expression CPAREN statement_group\l  while_statement -> . WHILE OPAREN boolean_expression CPAREN loop_statement_group\l  for_statement -> . FOR OPAREN var_assignment SCOLON boolean_expression SCOLON arith_expression CPAREN loop_statement_group\l  switch_statement -> . SWITCH OPAREN SYMBOL CPAREN OCURLY case_clause_list CCURLY\l  switch_statement -> . SWITCH OPAREN SYMBOL CPAREN OCURLY case_clause_list CCURLY else_clause\l"];
	q47 [label="47:\l  statement -> var_assignment . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q48 [label="48:\l  statement -> function_call . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q49 [label="49:\l  statement -> if_statement . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q50 [label="50:\l  statement -> while_statement . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q51 [label="51:\l  statement -> for_statement . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q52 [label="52:\l  statement -> switch_statement . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q53 [label="53:\l  var_definition -> NUM COLON SYMBOL ASSIGN NUMBER . SCOLON\l"];
	q54 [label="54:\l  var_definition -> STRG COLON SYMBOL ASSIGN STRING . SCOLON\l"];
	q55 [label="55:\l  var_definition -> BOOL COLON SYMBOL ASSIGN TRUE . SCOLON\l"];
	q56 [label="56:\l  var_definition -> BOOL COLON SYMBOL ASSIGN FALSE . SCOLON\l"];
	q57 [label="57:\l  fd_parameter -> NUM COLON SYMBOL . { COMMA CPAREN }\l"];
	q58 [label="58:\l  fd_parameter -> STRG COLON SYMBOL . { COMMA CPAREN }\l"];
	q59 [label="59:\l  fd_parameter -> BOOL COLON SYMBOL . { COMMA CPAREN }\l"];
	q60 [label="60:\l  function_def_parameters -> OPAREN fd_parameter_list CPAREN OPAREN . fd_parameter_list CPAREN\l  fd_parameter -> . { COMMA CPAREN }\l  fd_parameter -> . NUM COLON SYMBOL\l  fd_parameter -> . STRG COLON SYMBOL\l  fd_parameter -> . BOOL COLON SYMBOL\l  fd_parameter_list -> . fd_parameter\l  fd_parameter_list -> . fd_parameter COMMA fd_parameter_list\l"];
	q61 [label="61:\l  fd_parameter_list -> fd_parameter COMMA fd_parameter_list . { CPAREN }\l"];
	q62 [label="62:\l  statement -> RETURN SCOLON . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q63 [label="63:\l  boolean_expression -> . { CPAREN }\l  boolean_expression -> . TRUE\l  boolean_expression -> . FALSE\l  boolean_expression -> . boolean_function OPAREN boolean_factor COMMA boolean_factor CPAREN\l  boolean_expression -> . NOT OPAREN boolean_factor CPAREN\l  boolean_function -> . EQ\l  boolean_function -> . NEQ\l  boolean_function -> . MORE\l  boolean_function -> . LESS\l  boolean_function -> . OR\l  boolean_function -> . AND\l  if_statement -> IF OPAREN . boolean_expression CPAREN statement_group else_clause_list\l  if_statement -> IF OPAREN . boolean_expression CPAREN statement_group\l"];
	q64 [label="64:\l  boolean_expression -> . { CPAREN }\l  boolean_expression -> . TRUE\l  boolean_expression -> . FALSE\l  boolean_expression -> . boolean_function OPAREN boolean_factor COMMA boolean_factor CPAREN\l  boolean_expression -> . NOT OPAREN boolean_factor CPAREN\l  boolean_function -> . EQ\l  boolean_function -> . NEQ\l  boolean_function -> . MORE\l  boolean_function -> . LESS\l  boolean_function -> . OR\l  boolean_function -> . AND\l  while_statement -> WHILE OPAREN . boolean_expression CPAREN loop_statement_group\l"];
	q65 [label="65:\l  var_assignment -> . SYMBOL ASSIGN expression SCOLON\l  for_statement -> FOR OPAREN . var_assignment SCOLON boolean_expression SCOLON arith_expression CPAREN loop_statement_group\l"];
	q66 [label="66:\l  switch_statement -> SWITCH OPAREN . SYMBOL CPAREN OCURLY case_clause_list CCURLY\l  switch_statement -> SWITCH OPAREN . SYMBOL CPAREN OCURLY case_clause_list CCURLY else_clause\l"];
	q67 [label="67:\l  function_call_parameters -> OPAREN . fc_parameter_list CPAREN OPAREN fc_parameter_list CPAREN\l  fc_parameter_list -> . { CPAREN }\l  fc_parameter_list -> . fc_parameter\l  fc_parameter_list -> . fc_parameter COMMA fc_parameter_list\l  fc_parameter -> . SYMBOL\l  fc_parameter -> . TRUE\l  fc_parameter -> . FALSE\l  fc_parameter -> . arith_expression\l  fc_parameter -> . string_expression\l  fc_parameter -> . boolean_expression\l  string_expression -> . STRING\l  string_expression -> . STRING PLUS string_element_list\l  boolean_expression -> . { COMMA CPAREN }\l  boolean_expression -> . TRUE\l  boolean_expression -> . FALSE\l  boolean_expression -> . boolean_function OPAREN boolean_factor COMMA boolean_factor CPAREN\l  boolean_expression -> . NOT OPAREN boolean_factor CPAREN\l  boolean_function -> . EQ\l  boolean_function -> . NEQ\l  boolean_function -> . MORE\l  boolean_function -> . LESS\l  boolean_function -> . OR\l  boolean_function -> . AND\l  arith_expression -> . arith_expression PLUS arith_term\l  arith_expression -> . arith_expression MINUS arith_term\l  arith_expression -> . arith_term\l  arith_term -> . arith_term MULT arith_factor\l  arith_term -> . arith_term DIV arith_factor\l  arith_term -> . arith_term MODULO arith_factor\l  arith_term -> . arith_factor\l  arith_factor -> . MINUS arith_factor\l  arith_factor -> . OPAREN arith_expression CPAREN\l  arith_factor -> . NUMBER\l  arith_factor -> . SYMBOL\l"];
	q68 [label="68:\l  var_assignment -> SYMBOL ASSIGN . expression SCOLON\l  expression -> . boolean_expression\l  expression -> . arith_expression\l  expression -> . string_expression\l  string_expression -> . STRING\l  string_expression -> . STRING PLUS string_element_list\l  boolean_expression -> . { SCOLON }\l  boolean_expression -> . TRUE\l  boolean_expression -> . FALSE\l  boolean_expression -> . boolean_function OPAREN boolean_factor COMMA boolean_factor CPAREN\l  boolean_expression -> . NOT OPAREN boolean_factor CPAREN\l  boolean_function -> . EQ\l  boolean_function -> . NEQ\l  boolean_function -> . MORE\l  boolean_function -> . LESS\l  boolean_function -> . OR\l  boolean_function -> . AND\l  arith_expression -> . arith_expression PLUS arith_term\l  arith_expression -> . arith_expression MINUS arith_term\l  arith_expression -> . arith_term\l  arith_term -> . arith_term MULT arith_factor\l  arith_term -> . arith_term DIV arith_factor\l  arith_term -> . arith_term MODULO arith_factor\l  arith_term -> . arith_factor\l  arith_factor -> . MINUS arith_factor\l  arith_factor -> . OPAREN arith_expression CPAREN\l  arith_factor -> . NUMBER\l  arith_factor -> . SYMBOL\l"];
	q69 [label="69:\l  function_call -> SYMBOL function_call_parameters . SCOLON\l"];
	q70 [label="70:\l  statement_group -> OCURLY statement_list CCURLY . { SYMBOL CCURLY OCURLY CASE SWITCH FOR WHILE ELSE IF CONT BREAK RETURN IMPORT BOOL STRG NUM $end }\l"];
	q71 [label="71:\l  statement_list -> statement statement_list . { CCURLY }\l"];
	q72 [label="72:\l  var_definition -> NUM COLON SYMBOL ASSIGN NUMBER SCOLON . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN IMPORT BOOL STRG NUM $end }\l"];
	q73 [label="73:\l  var_definition -> STRG COLON SYMBOL ASSIGN STRING SCOLON . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN IMPORT BOOL STRG NUM $end }\l"];
	q74 [label="74:\l  var_definition -> BOOL COLON SYMBOL ASSIGN TRUE SCOLON . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN IMPORT BOOL STRG NUM $end }\l"];
	q75 [label="75:\l  var_definition -> BOOL COLON SYMBOL ASSIGN FALSE SCOLON . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN IMPORT BOOL STRG NUM $end }\l"];
	q76 [label="76:\l  function_def_parameters -> OPAREN fd_parameter_list CPAREN OPAREN fd_parameter_list . CPAREN\l"];
	q77 [label="77:\l  boolean_function -> OR . { OPAREN }\l"];
	q78 [label="78:\l  boolean_function -> AND . { OPAREN }\l"];
	q79 [label="79:\l  boolean_expression -> NOT . OPAREN boolean_factor CPAREN\l"];
	q80 [label="80:\l  boolean_function -> EQ . { OPAREN }\l"];
	q81 [label="81:\l  boolean_function -> NEQ . { OPAREN }\l"];
	q82 [label="82:\l  boolean_function -> MORE . { OPAREN }\l"];
	q83 [label="83:\l  boolean_function -> LESS . { OPAREN }\l"];
	q84 [label="84:\l  boolean_expression -> TRUE . { SCOLON COMMA CPAREN }\l"];
	q85 [label="85:\l  boolean_expression -> FALSE . { SCOLON COMMA CPAREN }\l"];
	q86 [label="86:\l  if_statement -> IF OPAREN boolean_expression . CPAREN statement_group else_clause_list\l  if_statement -> IF OPAREN boolean_expression . CPAREN statement_group\l"];
	q87 [label="87:\l  boolean_expression -> boolean_function . OPAREN boolean_factor COMMA boolean_factor CPAREN\l"];
	q88 [label="88:\l  while_statement -> WHILE OPAREN boolean_expression . CPAREN loop_statement_group\l"];
	q89 [label="89:\l  var_assignment -> SYMBOL . ASSIGN expression SCOLON\l"];
	q90 [label="90:\l  for_statement -> FOR OPAREN var_assignment . SCOLON boolean_expression SCOLON arith_expression CPAREN loop_statement_group\l"];
	q91 [label="91:\l  switch_statement -> SWITCH OPAREN SYMBOL . CPAREN OCURLY case_clause_list CCURLY\l  switch_statement -> SWITCH OPAREN SYMBOL . CPAREN OCURLY case_clause_list CCURLY else_clause\l"];
	q92 [label="92:\l  fc_parameter -> TRUE . { COMMA CPAREN }\l  boolean_expression -> TRUE . { COMMA CPAREN }\l"];
	q93 [label="93:\l  fc_parameter -> FALSE . { COMMA CPAREN }\l  boolean_expression -> FALSE . { COMMA CPAREN }\l"];
	q94 [label="94:\l  arith_expression -> . arith_expression PLUS arith_term\l  arith_expression -> . arith_expression MINUS arith_term\l  arith_expression -> . arith_term\l  arith_term -> . arith_term MULT arith_factor\l  arith_term -> . arith_term DIV arith_factor\l  arith_term -> . arith_term MODULO arith_factor\l  arith_term -> . arith_factor\l  arith_factor -> . MINUS arith_factor\l  arith_factor -> . OPAREN arith_expression CPAREN\l  arith_factor -> OPAREN . arith_expression CPAREN\l  arith_factor -> . NUMBER\l  arith_factor -> . SYMBOL\l"];
	q95 [label="95:\l  arith_factor -> . MINUS arith_factor\l  arith_factor -> MINUS . arith_factor\l  arith_factor -> . OPAREN arith_expression CPAREN\l  arith_factor -> . NUMBER\l  arith_factor -> . SYMBOL\l"];
	q96 [label="96:\l  fc_parameter -> SYMBOL . { COMMA CPAREN }\l  arith_factor -> SYMBOL . { MODULO DIV MULT MINUS PLUS COMMA CPAREN }\l"];
	q97 [label="97:\l  arith_factor -> NUMBER . { MODULO DIV MULT MINUS PLUS SCOLON COMMA CPAREN }\l"];
	q98 [label="98:\l  string_expression -> STRING . { SCOLON COMMA CPAREN }\l  string_expression -> STRING . PLUS string_element_list\l"];
	q99 [label="99:\l  function_call_parameters -> OPAREN fc_parameter_list . CPAREN OPAREN fc_parameter_list CPAREN\l"];
	q100 [label="100:\l  fc_parameter_list -> fc_parameter . { CPAREN }\l  fc_parameter_list -> fc_parameter . COMMA fc_parameter_list\l"];
	q101 [label="101:\l  fc_parameter -> arith_expression . { COMMA CPAREN }\l  arith_expression -> arith_expression . PLUS arith_term\l  arith_expression -> arith_expression . MINUS arith_term\l"];
	q102 [label="102:\l  fc_parameter -> string_expression . { COMMA CPAREN }\l"];
	q103 [label="103:\l  fc_parameter -> boolean_expression . { COMMA CPAREN }\l"];
	q104 [label="104:\l  arith_expression -> arith_term . { MINUS PLUS SCOLON COMMA CPAREN }\l  arith_term -> arith_term . MULT arith_factor\l  arith_term -> arith_term . DIV arith_factor\l  arith_term -> arith_term . MODULO arith_factor\l"];
	q105 [label="105:\l  arith_term -> arith_factor . { MODULO DIV MULT MINUS PLUS SCOLON COMMA CPAREN }\l"];
	q106 [label="106:\l  arith_factor -> SYMBOL . { MODULO DIV MULT MINUS PLUS SCOLON COMMA CPAREN }\l"];
	q107 [label="107:\l  var_assignment -> SYMBOL ASSIGN expression . SCOLON\l"];
	q108 [label="108:\l  expression -> arith_expression . { SCOLON }\l  arith_expression -> arith_expression . PLUS arith_term\l  arith_expression -> arith_expression . MINUS arith_term\l"];
	q109 [label="109:\l  expression -> string_expression . { SCOLON }\l"];
	q110 [label="110:\l  expression -> boolean_expression . { SCOLON }\l"];
	q111 [label="111:\l  function_call -> SYMBOL function_call_parameters SCOLON . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q112 [label="112:\l  function_def_parameters -> OPAREN fd_parameter_list CPAREN OPAREN fd_parameter_list CPAREN . { OCURLY }\l"];
	q113 [label="113:\l  boolean_expression -> . { CPAREN }\l  boolean_expression -> . TRUE\l  boolean_expression -> . FALSE\l  boolean_expression -> . boolean_function OPAREN boolean_factor COMMA boolean_factor CPAREN\l  boolean_expression -> . NOT OPAREN boolean_factor CPAREN\l  boolean_expression -> NOT OPAREN . boolean_factor CPAREN\l  boolean_factor -> . STRING\l  boolean_factor -> . SYMBOL\l  boolean_factor -> . boolean_expression\l  boolean_function -> . EQ\l  boolean_function -> . NEQ\l  boolean_function -> . MORE\l  boolean_function -> . LESS\l  boolean_function -> . OR\l  boolean_function -> . AND\l"];
	q114 [label="114:\l  statement_group -> . OCURLY statement_list CCURLY\l  if_statement -> IF OPAREN boolean_expression CPAREN . statement_group else_clause_list\l  if_statement -> IF OPAREN boolean_expression CPAREN . statement_group\l"];
	q115 [label="115:\l  boolean_expression -> . { COMMA }\l  boolean_expression -> . TRUE\l  boolean_expression -> . FALSE\l  boolean_expression -> . boolean_function OPAREN boolean_factor COMMA boolean_factor CPAREN\l  boolean_expression -> boolean_function OPAREN . boolean_factor COMMA boolean_factor CPAREN\l  boolean_expression -> . NOT OPAREN boolean_factor CPAREN\l  boolean_factor -> . STRING\l  boolean_factor -> . SYMBOL\l  boolean_factor -> . boolean_expression\l  boolean_function -> . EQ\l  boolean_function -> . NEQ\l  boolean_function -> . MORE\l  boolean_function -> . LESS\l  boolean_function -> . OR\l  boolean_function -> . AND\l"];
	q116 [label="116:\l  loop_statement_group -> . OCURLY loop_statement_list CCURLY\l  while_statement -> WHILE OPAREN boolean_expression CPAREN . loop_statement_group\l"];
	q117 [label="117:\l  boolean_expression -> . { SCOLON }\l  boolean_expression -> . TRUE\l  boolean_expression -> . FALSE\l  boolean_expression -> . boolean_function OPAREN boolean_factor COMMA boolean_factor CPAREN\l  boolean_expression -> . NOT OPAREN boolean_factor CPAREN\l  boolean_function -> . EQ\l  boolean_function -> . NEQ\l  boolean_function -> . MORE\l  boolean_function -> . LESS\l  boolean_function -> . OR\l  boolean_function -> . AND\l  for_statement -> FOR OPAREN var_assignment SCOLON . boolean_expression SCOLON arith_expression CPAREN loop_statement_group\l"];
	q118 [label="118:\l  switch_statement -> SWITCH OPAREN SYMBOL CPAREN . OCURLY case_clause_list CCURLY\l  switch_statement -> SWITCH OPAREN SYMBOL CPAREN . OCURLY case_clause_list CCURLY else_clause\l"];
	q119 [label="119:\l  arith_expression -> arith_expression . PLUS arith_term\l  arith_expression -> arith_expression . MINUS arith_term\l  arith_factor -> OPAREN arith_expression . CPAREN\l"];
	q120 [label="120:\l  arith_factor -> MINUS arith_factor . { MODULO DIV MULT MINUS PLUS SCOLON COMMA CPAREN }\l"];
	q121 [label="121:\l  string_expression -> STRING PLUS . string_element_list\l  string_element_list -> . string_element\l  string_element_list -> . string_element PLUS string_element_list\l  string_element -> . STRING\l  string_element -> . SYMBOL\l  string_element -> . NUMBER\l  string_element -> . TRUE\l  string_element -> . FALSE\l  string_element -> . boolean_expression\l  string_element -> . arith_expression\l  boolean_expression -> . { PLUS SCOLON COMMA CPAREN }\l  boolean_expression -> . TRUE\l  boolean_expression -> . FALSE\l  boolean_expression -> . boolean_function OPAREN boolean_factor COMMA boolean_factor CPAREN\l  boolean_expression -> . NOT OPAREN boolean_factor CPAREN\l  boolean_function -> . EQ\l  boolean_function -> . NEQ\l  boolean_function -> . MORE\l  boolean_function -> . LESS\l  boolean_function -> . OR\l  boolean_function -> . AND\l  arith_expression -> . arith_expression PLUS arith_term\l  arith_expression -> . arith_expression MINUS arith_term\l  arith_expression -> . arith_term\l  arith_term -> . arith_term MULT arith_factor\l  arith_term -> . arith_term DIV arith_factor\l  arith_term -> . arith_term MODULO arith_factor\l  arith_term -> . arith_factor\l  arith_factor -> . MINUS arith_factor\l  arith_factor -> . OPAREN arith_expression CPAREN\l  arith_factor -> . NUMBER\l  arith_factor -> . SYMBOL\l"];
	q122 [label="122:\l  function_call_parameters -> OPAREN fc_parameter_list CPAREN . OPAREN fc_parameter_list CPAREN\l"];
	q123 [label="123:\l  fc_parameter_list -> . { CPAREN }\l  fc_parameter_list -> . fc_parameter\l  fc_parameter_list -> . fc_parameter COMMA fc_parameter_list\l  fc_parameter_list -> fc_parameter COMMA . fc_parameter_list\l  fc_parameter -> . SYMBOL\l  fc_parameter -> . TRUE\l  fc_parameter -> . FALSE\l  fc_parameter -> . arith_expression\l  fc_parameter -> . string_expression\l  fc_parameter -> . boolean_expression\l  string_expression -> . STRING\l  string_expression -> . STRING PLUS string_element_list\l  boolean_expression -> . { COMMA CPAREN }\l  boolean_expression -> . TRUE\l  boolean_expression -> . FALSE\l  boolean_expression -> . boolean_function OPAREN boolean_factor COMMA boolean_factor CPAREN\l  boolean_expression -> . NOT OPAREN boolean_factor CPAREN\l  boolean_function -> . EQ\l  boolean_function -> . NEQ\l  boolean_function -> . MORE\l  boolean_function -> . LESS\l  boolean_function -> . OR\l  boolean_function -> . AND\l  arith_expression -> . arith_expression PLUS arith_term\l  arith_expression -> . arith_expression MINUS arith_term\l  arith_expression -> . arith_term\l  arith_term -> . arith_term MULT arith_factor\l  arith_term -> . arith_term DIV arith_factor\l  arith_term -> . arith_term MODULO arith_factor\l  arith_term -> . arith_factor\l  arith_factor -> . MINUS arith_factor\l  arith_factor -> . OPAREN arith_expression CPAREN\l  arith_factor -> . NUMBER\l  arith_factor -> . SYMBOL\l"];
	q124 [label="124:\l  arith_expression -> arith_expression PLUS . arith_term\l  arith_term -> . arith_term MULT arith_factor\l  arith_term -> . arith_term DIV arith_factor\l  arith_term -> . arith_term MODULO arith_factor\l  arith_term -> . arith_factor\l  arith_factor -> . MINUS arith_factor\l  arith_factor -> . OPAREN arith_expression CPAREN\l  arith_factor -> . NUMBER\l  arith_factor -> . SYMBOL\l"];
	q125 [label="125:\l  arith_expression -> arith_expression MINUS . arith_term\l  arith_term -> . arith_term MULT arith_factor\l  arith_term -> . arith_term DIV arith_factor\l  arith_term -> . arith_term MODULO arith_factor\l  arith_term -> . arith_factor\l  arith_factor -> . MINUS arith_factor\l  arith_factor -> . OPAREN arith_expression CPAREN\l  arith_factor -> . NUMBER\l  arith_factor -> . SYMBOL\l"];
	q126 [label="126:\l  arith_term -> arith_term MULT . arith_factor\l  arith_factor -> . MINUS arith_factor\l  arith_factor -> . OPAREN arith_expression CPAREN\l  arith_factor -> . NUMBER\l  arith_factor -> . SYMBOL\l"];
	q127 [label="127:\l  arith_term -> arith_term DIV . arith_factor\l  arith_factor -> . MINUS arith_factor\l  arith_factor -> . OPAREN arith_expression CPAREN\l  arith_factor -> . NUMBER\l  arith_factor -> . SYMBOL\l"];
	q128 [label="128:\l  arith_term -> arith_term MODULO . arith_factor\l  arith_factor -> . MINUS arith_factor\l  arith_factor -> . OPAREN arith_expression CPAREN\l  arith_factor -> . NUMBER\l  arith_factor -> . SYMBOL\l"];
	q129 [label="129:\l  var_assignment -> SYMBOL ASSIGN expression SCOLON . { SYMBOL SCOLON CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q130 [label="130:\l  boolean_factor -> SYMBOL . { COMMA CPAREN }\l"];
	q131 [label="131:\l  boolean_factor -> STRING . { COMMA CPAREN }\l"];
	q132 [label="132:\l  boolean_factor -> boolean_expression . { COMMA CPAREN }\l"];
	q133 [label="133:\l  boolean_expression -> NOT OPAREN boolean_factor . CPAREN\l"];
	q134 [label="134:\l  if_statement -> IF OPAREN boolean_expression CPAREN statement_group . else_clause_list\l  if_statement -> IF OPAREN boolean_expression CPAREN statement_group . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l  else_clause_list -> . else_clause\l  else_clause_list -> . else_clause else_clause_list\l  else_clause -> . ELSE OPAREN boolean_expression CPAREN statement_group\l"];
	q135 [label="135:\l  boolean_expression -> boolean_function OPAREN boolean_factor . COMMA boolean_factor CPAREN\l"];
	q136 [label="136:\l  var_definition -> . NUM COLON SYMBOL ASSIGN NUMBER SCOLON\l  var_definition -> . STRG COLON SYMBOL ASSIGN STRING SCOLON\l  var_definition -> . BOOL COLON SYMBOL ASSIGN TRUE SCOLON\l  var_definition -> . BOOL COLON SYMBOL ASSIGN FALSE SCOLON\l  statement_group -> . OCURLY statement_list CCURLY\l  statement -> . var_definition\l  statement -> . var_assignment\l  statement -> . function_call\l  statement -> . if_statement\l  statement -> . while_statement\l  statement -> . for_statement\l  statement -> . switch_statement\l  statement -> . RETURN SCOLON\l  statement -> . statement_group\l  var_assignment -> . SYMBOL ASSIGN expression SCOLON\l  function_call -> . SYMBOL function_call_parameters SCOLON\l  if_statement -> . IF OPAREN boolean_expression CPAREN statement_group else_clause_list\l  if_statement -> . IF OPAREN boolean_expression CPAREN statement_group\l  loop_statement_group -> OCURLY . loop_statement_list CCURLY\l  loop_statement_list -> . loop_statement\l  loop_statement_list -> . loop_statement loop_statement_list\l  loop_statement -> . statement\l  loop_statement -> . CONT SCOLON\l  loop_statement -> . BREAK SCOLON\l  while_statement -> . WHILE OPAREN boolean_expression CPAREN loop_statement_group\l  for_statement -> . FOR OPAREN var_assignment SCOLON boolean_expression SCOLON arith_expression CPAREN loop_statement_group\l  switch_statement -> . SWITCH OPAREN SYMBOL CPAREN OCURLY case_clause_list CCURLY\l  switch_statement -> . SWITCH OPAREN SYMBOL CPAREN OCURLY case_clause_list CCURLY else_clause\l"];
	q137 [label="137:\l  while_statement -> WHILE OPAREN boolean_expression CPAREN loop_statement_group . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q138 [label="138:\l  for_statement -> FOR OPAREN var_assignment SCOLON boolean_expression . SCOLON arith_expression CPAREN loop_statement_group\l"];
	q139 [label="139:\l  switch_statement -> SWITCH OPAREN SYMBOL CPAREN OCURLY . case_clause_list CCURLY\l  switch_statement -> SWITCH OPAREN SYMBOL CPAREN OCURLY . case_clause_list CCURLY else_clause\l  case_clause_list -> . case_clause\l  case_clause_list -> . case_clause case_clause_list\l  case_clause -> . CASE OPAREN SYMBOL CPAREN statement_group\l  case_clause -> . CASE OPAREN NUMBER CPAREN statement_group\l  case_clause -> . CASE OPAREN STRING CPAREN statement_group\l  case_clause -> . CASE OPAREN TRUE CPAREN statement_group\l  case_clause -> . CASE OPAREN FALSE CPAREN statement_group\l"];
	q140 [label="140:\l  arith_factor -> OPAREN arith_expression CPAREN . { MODULO DIV MULT MINUS PLUS SCOLON COMMA CPAREN }\l"];
	q141 [label="141:\l  string_element -> TRUE . { PLUS SCOLON COMMA CPAREN }\l  boolean_expression -> TRUE . { PLUS SCOLON COMMA CPAREN }\l"];
	q142 [label="142:\l  string_element -> FALSE . { PLUS SCOLON COMMA CPAREN }\l  boolean_expression -> FALSE . { PLUS SCOLON COMMA CPAREN }\l"];
	q143 [label="143:\l  string_element -> SYMBOL . { PLUS SCOLON COMMA CPAREN }\l  arith_factor -> SYMBOL . { MODULO DIV MULT MINUS PLUS SCOLON COMMA CPAREN }\l"];
	q144 [label="144:\l  string_element -> NUMBER . { PLUS SCOLON COMMA CPAREN }\l  arith_factor -> NUMBER . { MODULO DIV MULT MINUS PLUS SCOLON COMMA CPAREN }\l"];
	q145 [label="145:\l  string_element -> STRING . { PLUS SCOLON COMMA CPAREN }\l"];
	q146 [label="146:\l  string_element -> arith_expression . { PLUS SCOLON COMMA CPAREN }\l  arith_expression -> arith_expression . PLUS arith_term\l  arith_expression -> arith_expression . MINUS arith_term\l"];
	q147 [label="147:\l  string_element -> boolean_expression . { PLUS SCOLON COMMA CPAREN }\l"];
	q148 [label="148:\l  string_expression -> STRING PLUS string_element_list . { SCOLON COMMA CPAREN }\l"];
	q149 [label="149:\l  string_element_list -> string_element . { SCOLON COMMA CPAREN }\l  string_element_list -> string_element . PLUS string_element_list\l"];
	q150 [label="150:\l  function_call_parameters -> OPAREN fc_parameter_list CPAREN OPAREN . fc_parameter_list CPAREN\l  fc_parameter_list -> . { CPAREN }\l  fc_parameter_list -> . fc_parameter\l  fc_parameter_list -> . fc_parameter COMMA fc_parameter_list\l  fc_parameter -> . SYMBOL\l  fc_parameter -> . TRUE\l  fc_parameter -> . FALSE\l  fc_parameter -> . arith_expression\l  fc_parameter -> . string_expression\l  fc_parameter -> . boolean_expression\l  string_expression -> . STRING\l  string_expression -> . STRING PLUS string_element_list\l  boolean_expression -> . { COMMA CPAREN }\l  boolean_expression -> . TRUE\l  boolean_expression -> . FALSE\l  boolean_expression -> . boolean_function OPAREN boolean_factor COMMA boolean_factor CPAREN\l  boolean_expression -> . NOT OPAREN boolean_factor CPAREN\l  boolean_function -> . EQ\l  boolean_function -> . NEQ\l  boolean_function -> . MORE\l  boolean_function -> . LESS\l  boolean_function -> . OR\l  boolean_function -> . AND\l  arith_expression -> . arith_expression PLUS arith_term\l  arith_expression -> . arith_expression MINUS arith_term\l  arith_expression -> . arith_term\l  arith_term -> . arith_term MULT arith_factor\l  arith_term -> . arith_term DIV arith_factor\l  arith_term -> . arith_term MODULO arith_factor\l  arith_term -> . arith_factor\l  arith_factor -> . MINUS arith_factor\l  arith_factor -> . OPAREN arith_expression CPAREN\l  arith_factor -> . NUMBER\l  arith_factor -> . SYMBOL\l"];
	q151 [label="151:\l  fc_parameter_list -> fc_parameter COMMA fc_parameter_list . { CPAREN }\l"];
	q152 [label="152:\l  arith_expression -> arith_expression PLUS arith_term . { MINUS PLUS SCOLON COMMA CPAREN }\l  arith_term -> arith_term . MULT arith_factor\l  arith_term -> arith_term . DIV arith_factor\l  arith_term -> arith_term . MODULO arith_factor\l"];
	q153 [label="153:\l  arith_expression -> arith_expression MINUS arith_term . { MINUS PLUS SCOLON COMMA CPAREN }\l  arith_term -> arith_term . MULT arith_factor\l  arith_term -> arith_term . DIV arith_factor\l  arith_term -> arith_term . MODULO arith_factor\l"];
	q154 [label="154:\l  arith_term -> arith_term MULT arith_factor . { MODULO DIV MULT MINUS PLUS SCOLON COMMA CPAREN }\l"];
	q155 [label="155:\l  arith_term -> arith_term DIV arith_factor . { MODULO DIV MULT MINUS PLUS SCOLON COMMA CPAREN }\l"];
	q156 [label="156:\l  arith_term -> arith_term MODULO arith_factor . { MODULO DIV MULT MINUS PLUS SCOLON COMMA CPAREN }\l"];
	q157 [label="157:\l  boolean_expression -> NOT OPAREN boolean_factor CPAREN . { PLUS SCOLON COMMA CPAREN }\l"];
	q158 [label="158:\l  else_clause -> ELSE . OPAREN boolean_expression CPAREN statement_group\l"];
	q159 [label="159:\l  if_statement -> IF OPAREN boolean_expression CPAREN statement_group else_clause_list . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q160 [label="160:\l  else_clause_list -> . else_clause\l  else_clause_list -> else_clause . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l  else_clause_list -> . else_clause else_clause_list\l  else_clause_list -> else_clause . else_clause_list\l  else_clause -> . ELSE OPAREN boolean_expression CPAREN statement_group\l"];
	q161 [label="161:\l  boolean_expression -> . { CPAREN }\l  boolean_expression -> . TRUE\l  boolean_expression -> . FALSE\l  boolean_expression -> . boolean_function OPAREN boolean_factor COMMA boolean_factor CPAREN\l  boolean_expression -> boolean_function OPAREN boolean_factor COMMA . boolean_factor CPAREN\l  boolean_expression -> . NOT OPAREN boolean_factor CPAREN\l  boolean_factor -> . STRING\l  boolean_factor -> . SYMBOL\l  boolean_factor -> . boolean_expression\l  boolean_function -> . EQ\l  boolean_function -> . NEQ\l  boolean_function -> . MORE\l  boolean_function -> . LESS\l  boolean_function -> . OR\l  boolean_function -> . AND\l"];
	q162 [label="162:\l  loop_statement -> BREAK . SCOLON\l"];
	q163 [label="163:\l  loop_statement -> CONT . SCOLON\l"];
	q164 [label="164:\l  loop_statement -> statement . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q165 [label="165:\l  loop_statement_group -> OCURLY loop_statement_list . CCURLY\l"];
	q166 [label="166:\l  var_definition -> . NUM COLON SYMBOL ASSIGN NUMBER SCOLON\l  var_definition -> . STRG COLON SYMBOL ASSIGN STRING SCOLON\l  var_definition -> . BOOL COLON SYMBOL ASSIGN TRUE SCOLON\l  var_definition -> . BOOL COLON SYMBOL ASSIGN FALSE SCOLON\l  statement_group -> . OCURLY statement_list CCURLY\l  statement -> . var_definition\l  statement -> . var_assignment\l  statement -> . function_call\l  statement -> . if_statement\l  statement -> . while_statement\l  statement -> . for_statement\l  statement -> . switch_statement\l  statement -> . RETURN SCOLON\l  statement -> . statement_group\l  var_assignment -> . SYMBOL ASSIGN expression SCOLON\l  function_call -> . SYMBOL function_call_parameters SCOLON\l  if_statement -> . IF OPAREN boolean_expression CPAREN statement_group else_clause_list\l  if_statement -> . IF OPAREN boolean_expression CPAREN statement_group\l  loop_statement_list -> . loop_statement\l  loop_statement_list -> loop_statement . { CCURLY }\l  loop_statement_list -> . loop_statement loop_statement_list\l  loop_statement_list -> loop_statement . loop_statement_list\l  loop_statement -> . statement\l  loop_statement -> . CONT SCOLON\l  loop_statement -> . BREAK SCOLON\l  while_statement -> . WHILE OPAREN boolean_expression CPAREN loop_statement_group\l  for_statement -> . FOR OPAREN var_assignment SCOLON boolean_expression SCOLON arith_expression CPAREN loop_statement_group\l  switch_statement -> . SWITCH OPAREN SYMBOL CPAREN OCURLY case_clause_list CCURLY\l  switch_statement -> . SWITCH OPAREN SYMBOL CPAREN OCURLY case_clause_list CCURLY else_clause\l"];
	q167 [label="167:\l  arith_expression -> . arith_expression PLUS arith_term\l  arith_expression -> . arith_expression MINUS arith_term\l  arith_expression -> . arith_term\l  arith_term -> . arith_term MULT arith_factor\l  arith_term -> . arith_term DIV arith_factor\l  arith_term -> . arith_term MODULO arith_factor\l  arith_term -> . arith_factor\l  arith_factor -> . MINUS arith_factor\l  arith_factor -> . OPAREN arith_expression CPAREN\l  arith_factor -> . NUMBER\l  arith_factor -> . SYMBOL\l  for_statement -> FOR OPAREN var_assignment SCOLON boolean_expression SCOLON . arith_expression CPAREN loop_statement_group\l"];
	q168 [label="168:\l  case_clause -> CASE . OPAREN SYMBOL CPAREN statement_group\l  case_clause -> CASE . OPAREN NUMBER CPAREN statement_group\l  case_clause -> CASE . OPAREN STRING CPAREN statement_group\l  case_clause -> CASE . OPAREN TRUE CPAREN statement_group\l  case_clause -> CASE . OPAREN FALSE CPAREN statement_group\l"];
	q169 [label="169:\l  switch_statement -> SWITCH OPAREN SYMBOL CPAREN OCURLY case_clause_list . CCURLY\l  switch_statement -> SWITCH OPAREN SYMBOL CPAREN OCURLY case_clause_list . CCURLY else_clause\l"];
	q170 [label="170:\l  case_clause_list -> . case_clause\l  case_clause_list -> case_clause . { CCURLY }\l  case_clause_list -> . case_clause case_clause_list\l  case_clause_list -> case_clause . case_clause_list\l  case_clause -> . CASE OPAREN SYMBOL CPAREN statement_group\l  case_clause -> . CASE OPAREN NUMBER CPAREN statement_group\l  case_clause -> . CASE OPAREN STRING CPAREN statement_group\l  case_clause -> . CASE OPAREN TRUE CPAREN statement_group\l  case_clause -> . CASE OPAREN FALSE CPAREN statement_group\l"];
	q171 [label="171:\l  string_element_list -> . string_element\l  string_element_list -> . string_element PLUS string_element_list\l  string_element_list -> string_element PLUS . string_element_list\l  string_element -> . STRING\l  string_element -> . SYMBOL\l  string_element -> . NUMBER\l  string_element -> . TRUE\l  string_element -> . FALSE\l  string_element -> . boolean_expression\l  string_element -> . arith_expression\l  boolean_expression -> . { PLUS SCOLON COMMA CPAREN }\l  boolean_expression -> . TRUE\l  boolean_expression -> . FALSE\l  boolean_expression -> . boolean_function OPAREN boolean_factor COMMA boolean_factor CPAREN\l  boolean_expression -> . NOT OPAREN boolean_factor CPAREN\l  boolean_function -> . EQ\l  boolean_function -> . NEQ\l  boolean_function -> . MORE\l  boolean_function -> . LESS\l  boolean_function -> . OR\l  boolean_function -> . AND\l  arith_expression -> . arith_expression PLUS arith_term\l  arith_expression -> . arith_expression MINUS arith_term\l  arith_expression -> . arith_term\l  arith_term -> . arith_term MULT arith_factor\l  arith_term -> . arith_term DIV arith_factor\l  arith_term -> . arith_term MODULO arith_factor\l  arith_term -> . arith_factor\l  arith_factor -> . MINUS arith_factor\l  arith_factor -> . OPAREN arith_expression CPAREN\l  arith_factor -> . NUMBER\l  arith_factor -> . SYMBOL\l"];
	q172 [label="172:\l  function_call_parameters -> OPAREN fc_parameter_list CPAREN OPAREN fc_parameter_list . CPAREN\l"];
	q173 [label="173:\l  boolean_expression -> . { CPAREN }\l  boolean_expression -> . TRUE\l  boolean_expression -> . FALSE\l  boolean_expression -> . boolean_function OPAREN boolean_factor COMMA boolean_factor CPAREN\l  boolean_expression -> . NOT OPAREN boolean_factor CPAREN\l  boolean_function -> . EQ\l  boolean_function -> . NEQ\l  boolean_function -> . MORE\l  boolean_function -> . LESS\l  boolean_function -> . OR\l  boolean_function -> . AND\l  else_clause -> ELSE OPAREN . boolean_expression CPAREN statement_group\l"];
	q174 [label="174:\l  else_clause_list -> else_clause else_clause_list . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q175 [label="175:\l  boolean_expression -> boolean_function OPAREN boolean_factor COMMA boolean_factor . CPAREN\l"];
	q176 [label="176:\l  loop_statement -> BREAK SCOLON . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q177 [label="177:\l  loop_statement -> CONT SCOLON . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q178 [label="178:\l  loop_statement_group -> OCURLY loop_statement_list CCURLY . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q179 [label="179:\l  loop_statement_list -> loop_statement loop_statement_list . { CCURLY }\l"];
	q180 [label="180:\l  arith_expression -> arith_expression . PLUS arith_term\l  arith_expression -> arith_expression . MINUS arith_term\l  for_statement -> FOR OPAREN var_assignment SCOLON boolean_expression SCOLON arith_expression . CPAREN loop_statement_group\l"];
	q181 [label="181:\l  case_clause -> CASE OPAREN . SYMBOL CPAREN statement_group\l  case_clause -> CASE OPAREN . NUMBER CPAREN statement_group\l  case_clause -> CASE OPAREN . STRING CPAREN statement_group\l  case_clause -> CASE OPAREN . TRUE CPAREN statement_group\l  case_clause -> CASE OPAREN . FALSE CPAREN statement_group\l"];
	q182 [label="182:\l  else_clause -> . ELSE OPAREN boolean_expression CPAREN statement_group\l  switch_statement -> SWITCH OPAREN SYMBOL CPAREN OCURLY case_clause_list CCURLY . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l  switch_statement -> SWITCH OPAREN SYMBOL CPAREN OCURLY case_clause_list CCURLY . else_clause\l"];
	q183 [label="183:\l  case_clause_list -> case_clause case_clause_list . { CCURLY }\l"];
	q184 [label="184:\l  string_element_list -> string_element PLUS string_element_list . { SCOLON COMMA CPAREN }\l"];
	q185 [label="185:\l  function_call_parameters -> OPAREN fc_parameter_list CPAREN OPAREN fc_parameter_list CPAREN . { SCOLON }\l"];
	q186 [label="186:\l  else_clause -> ELSE OPAREN boolean_expression . CPAREN statement_group\l"];
	q187 [label="187:\l  boolean_expression -> boolean_function OPAREN boolean_factor COMMA boolean_factor CPAREN . { PLUS SCOLON COMMA CPAREN }\l"];
	q188 [label="188:\l  loop_statement_group -> . OCURLY loop_statement_list CCURLY\l  for_statement -> FOR OPAREN var_assignment SCOLON boolean_expression SCOLON arith_expression CPAREN . loop_statement_group\l"];
	q189 [label="189:\l  case_clause -> CASE OPAREN TRUE . CPAREN statement_group\l"];
	q190 [label="190:\l  case_clause -> CASE OPAREN FALSE . CPAREN statement_group\l"];
	q191 [label="191:\l  case_clause -> CASE OPAREN SYMBOL . CPAREN statement_group\l"];
	q192 [label="192:\l  case_clause -> CASE OPAREN NUMBER . CPAREN statement_group\l"];
	q193 [label="193:\l  case_clause -> CASE OPAREN STRING . CPAREN statement_group\l"];
	q194 [label="194:\l  switch_statement -> SWITCH OPAREN SYMBOL CPAREN OCURLY case_clause_list CCURLY else_clause . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q195 [label="195:\l  statement_group -> . OCURLY statement_list CCURLY\l  else_clause -> ELSE OPAREN boolean_expression CPAREN . statement_group\l"];
	q196 [label="196:\l  for_statement -> FOR OPAREN var_assignment SCOLON boolean_expression SCOLON arith_expression CPAREN loop_statement_group . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q197 [label="197:\l  statement_group -> . OCURLY statement_list CCURLY\l  case_clause -> CASE OPAREN TRUE CPAREN . statement_group\l"];
	q198 [label="198:\l  statement_group -> . OCURLY statement_list CCURLY\l  case_clause -> CASE OPAREN FALSE CPAREN . statement_group\l"];
	q199 [label="199:\l  statement_group -> . OCURLY statement_list CCURLY\l  case_clause -> CASE OPAREN SYMBOL CPAREN . statement_group\l"];
	q200 [label="200:\l  statement_group -> . OCURLY statement_list CCURLY\l  case_clause -> CASE OPAREN NUMBER CPAREN . statement_group\l"];
	q201 [label="201:\l  statement_group -> . OCURLY statement_list CCURLY\l  case_clause -> CASE OPAREN STRING CPAREN . statement_group\l"];
	q202 [label="202:\l  else_clause -> ELSE OPAREN boolean_expression CPAREN statement_group . { SYMBOL CCURLY OCURLY SWITCH FOR WHILE ELSE IF CONT BREAK RETURN BOOL STRG NUM }\l"];
	q203 [label="203:\l  case_clause -> CASE OPAREN TRUE CPAREN statement_group . { CCURLY CASE }\l"];
	q204 [label="204:\l  case_clause -> CASE OPAREN FALSE CPAREN statement_group . { CCURLY CASE }\l"];
	q205 [label="205:\l  case_clause -> CASE OPAREN SYMBOL CPAREN statement_group . { CCURLY CASE }\l"];
	q206 [label="206:\l  case_clause -> CASE OPAREN NUMBER CPAREN statement_group . { CCURLY CASE }\l"];
	q207 [label="207:\l  case_clause -> CASE OPAREN STRING CPAREN statement_group . { CCURLY CASE }\l"];

	q0 -> q1 [label="NUM"];
	q0 -> q2 [label="STRG"];
	q0 -> q3 [label="BOOL"];
	q0 -> q4 [label="IMPORT"];
	q0 -> q5 [label="SYMBOL"];
	q0 -> q6 [label="module"];
	q0 -> q7 [label="module_element"];
	q0 -> q8 [label="import_directive"];
	q0 -> q9 [label="var_definition"];
	q0 -> q10 [label="function_definition"];
	q1 -> q11 [label="COLON"];
	q2 -> q12 [label="COLON"];
	q3 -> q13 [label="COLON"];
	q4 -> q14 [label="STRING"];
	q5 -> q15 [label="OPAREN"];
	q5 -> q16 [label="function_def_parameters"];
	q6 -> q1 [label="NUM"];
	q6 -> q2 [label="STRG"];
	q6 -> q3 [label="BOOL"];
	q6 -> q4 [label="IMPORT"];
	q6 -> q5 [label="SYMBOL"];
	q6 -> q17 [label="module_element"];
	q6 -> q8 [label="import_directive"];
	q6 -> q9 [label="var_definition"];
	q6 -> q10 [label="function_definition"];
	q11 -> q18 [label="SYMBOL"];
	q12 -> q19 [label="SYMBOL"];
	q13 -> q20 [label="SYMBOL"];
	q14 -> q21 [label="SCOLON"];
	q15 -> q22 [label="NUM"];
	q15 -> q23 [label="STRG"];
	q15 -> q24 [label="BOOL"];
	q15 -> q25 [label="fd_parameter_list"];
	q15 -> q26 [label="fd_parameter"];
	q16 -> q27 [label="OCURLY"];
	q16 -> q28 [label="statement_group"];
	q18 -> q29 [label="ASSIGN"];
	q19 -> q30 [label="ASSIGN"];
	q20 -> q31 [label="ASSIGN"];
	q22 -> q32 [label="COLON"];
	q23 -> q33 [label="COLON"];
	q24 -> q34 [label="COLON"];
	q25 -> q35 [label="CPAREN"];
	q26 -> q36 [label="COMMA"];
	q27 -> q1 [label="NUM"];
	q27 -> q2 [label="STRG"];
	q27 -> q3 [label="BOOL"];
	q27 -> q37 [label="RETURN"];
	q27 -> q38 [label="IF"];
	q27 -> q39 [label="WHILE"];
	q27 -> q40 [label="FOR"];
	q27 -> q41 [label="SWITCH"];
	q27 -> q27 [label="OCURLY"];
	q27 -> q42 [label="SYMBOL"];
	q27 -> q43 [label="var_definition"];
	q27 -> q44 [label="statement_group"];
	q27 -> q45 [label="statement_list"];
	q27 -> q46 [label="statement"];
	q27 -> q47 [label="var_assignment"];
	q27 -> q48 [label="function_call"];
	q27 -> q49 [label="if_statement"];
	q27 -> q50 [label="while_statement"];
	q27 -> q51 [label="for_statement"];
	q27 -> q52 [label="switch_statement"];
	q29 -> q53 [label="NUMBER"];
	q30 -> q54 [label="STRING"];
	q31 -> q55 [label="TRUE"];
	q31 -> q56 [label="FALSE"];
	q32 -> q57 [label="SYMBOL"];
	q33 -> q58 [label="SYMBOL"];
	q34 -> q59 [label="SYMBOL"];
	q35 -> q60 [label="OPAREN"];
	q36 -> q22 [label="NUM"];
	q36 -> q23 [label="STRG"];
	q36 -> q24 [label="BOOL"];
	q36 -> q61 [label="fd_parameter_list"];
	q36 -> q26 [label="fd_parameter"];
	q37 -> q62 [label="SCOLON"];
	q38 -> q63 [label="OPAREN"];
	q39 -> q64 [label="OPAREN"];
	q40 -> q65 [label="OPAREN"];
	q41 -> q66 [label="OPAREN"];
	q42 -> q67 [label="OPAREN"];
	q42 -> q68 [label="ASSIGN"];
	q42 -> q69 [label="function_call_parameters"];
	q45 -> q70 [label="CCURLY"];
	q46 -> q1 [label="NUM"];
	q46 -> q2 [label="STRG"];
	q46 -> q3 [label="BOOL"];
	q46 -> q37 [label="RETURN"];
	q46 -> q38 [label="IF"];
	q46 -> q39 [label="WHILE"];
	q46 -> q40 [label="FOR"];
	q46 -> q41 [label="SWITCH"];
	q46 -> q27 [label="OCURLY"];
	q46 -> q42 [label="SYMBOL"];
	q46 -> q43 [label="var_definition"];
	q46 -> q44 [label="statement_group"];
	q46 -> q71 [label="statement_list"];
	q46 -> q46 [label="statement"];
	q46 -> q47 [label="var_assignment"];
	q46 -> q48 [label="function_call"];
	q46 -> q49 [label="if_statement"];
	q46 -> q50 [label="while_statement"];
	q46 -> q51 [label="for_statement"];
	q46 -> q52 [label="switch_statement"];
	q53 -> q72 [label="SCOLON"];
	q54 -> q73 [label="SCOLON"];
	q55 -> q74 [label="SCOLON"];
	q56 -> q75 [label="SCOLON"];
	q60 -> q22 [label="NUM"];
	q60 -> q23 [label="STRG"];
	q60 -> q24 [label="BOOL"];
	q60 -> q76 [label="fd_parameter_list"];
	q60 -> q26 [label="fd_parameter"];
	q63 -> q77 [label="OR"];
	q63 -> q78 [label="AND"];
	q63 -> q79 [label="NOT"];
	q63 -> q80 [label="EQ"];
	q63 -> q81 [label="NEQ"];
	q63 -> q82 [label="MORE"];
	q63 -> q83 [label="LESS"];
	q63 -> q84 [label="TRUE"];
	q63 -> q85 [label="FALSE"];
	q63 -> q86 [label="boolean_expression"];
	q63 -> q87 [label="boolean_function"];
	q64 -> q77 [label="OR"];
	q64 -> q78 [label="AND"];
	q64 -> q79 [label="NOT"];
	q64 -> q80 [label="EQ"];
	q64 -> q81 [label="NEQ"];
	q64 -> q82 [label="MORE"];
	q64 -> q83 [label="LESS"];
	q64 -> q84 [label="TRUE"];
	q64 -> q85 [label="FALSE"];
	q64 -> q88 [label="boolean_expression"];
	q64 -> q87 [label="boolean_function"];
	q65 -> q89 [label="SYMBOL"];
	q65 -> q90 [label="var_assignment"];
	q66 -> q91 [label="SYMBOL"];
	q67 -> q77 [label="OR"];
	q67 -> q78 [label="AND"];
	q67 -> q79 [label="NOT"];
	q67 -> q80 [label="EQ"];
	q67 -> q81 [label="NEQ"];
	q67 -> q82 [label="MORE"];
	q67 -> q83 [label="LESS"];
	q67 -> q92 [label="TRUE"];
	q67 -> q93 [label="FALSE"];
	q67 -> q94 [label="OPAREN"];
	q67 -> q95 [label="MINUS"];
	q67 -> q96 [label="SYMBOL"];
	q67 -> q97 [label="NUMBER"];
	q67 -> q98 [label="STRING"];
	q67 -> q99 [label="fc_parameter_list"];
	q67 -> q100 [label="fc_parameter"];
	q67 -> q101 [label="arith_expression"];
	q67 -> q102 [label="string_expression"];
	q67 -> q103 [label="boolean_expression"];
	q67 -> q87 [label="boolean_function"];
	q67 -> q104 [label="arith_term"];
	q67 -> q105 [label="arith_factor"];
	q68 -> q77 [label="OR"];
	q68 -> q78 [label="AND"];
	q68 -> q79 [label="NOT"];
	q68 -> q80 [label="EQ"];
	q68 -> q81 [label="NEQ"];
	q68 -> q82 [label="MORE"];
	q68 -> q83 [label="LESS"];
	q68 -> q84 [label="TRUE"];
	q68 -> q85 [label="FALSE"];
	q68 -> q94 [label="OPAREN"];
	q68 -> q95 [label="MINUS"];
	q68 -> q106 [label="SYMBOL"];
	q68 -> q97 [label="NUMBER"];
	q68 -> q98 [label="STRING"];
	q68 -> q107 [label="expression"];
	q68 -> q108 [label="arith_expression"];
	q68 -> q109 [label="string_expression"];
	q68 -> q110 [label="boolean_expression"];
	q68 -> q87 [label="boolean_function"];
	q68 -> q104 [label="arith_term"];
	q68 -> q105 [label="arith_factor"];
	q69 -> q111 [label="SCOLON"];
	q76 -> q112 [label="CPAREN"];
	q79 -> q113 [label="OPAREN"];
	q86 -> q114 [label="CPAREN"];
	q87 -> q115 [label="OPAREN"];
	q88 -> q116 [label="CPAREN"];
	q89 -> q68 [label="ASSIGN"];
	q90 -> q117 [label="SCOLON"];
	q91 -> q118 [label="CPAREN"];
	q94 -> q94 [label="OPAREN"];
	q94 -> q95 [label="MINUS"];
	q94 -> q106 [label="SYMBOL"];
	q94 -> q97 [label="NUMBER"];
	q94 -> q119 [label="arith_expression"];
	q94 -> q104 [label="arith_term"];
	q94 -> q105 [label="arith_factor"];
	q95 -> q94 [label="OPAREN"];
	q95 -> q95 [label="MINUS"];
	q95 -> q106 [label="SYMBOL"];
	q95 -> q97 [label="NUMBER"];
	q95 -> q120 [label="arith_factor"];
	q98 -> q121 [label="PLUS"];
	q99 -> q122 [label="CPAREN"];
	q100 -> q123 [label="COMMA"];
	q101 -> q124 [label="PLUS"];
	q101 -> q125 [label="MINUS"];
	q104 -> q126 [label="MULT"];
	q104 -> q127 [label="DIV"];
	q104 -> q128 [label="MODULO"];
	q107 -> q129 [label="SCOLON"];
	q108 -> q124 [label="PLUS"];
	q108 -> q125 [label="MINUS"];
	q113 -> q77 [label="OR"];
	q113 -> q78 [label="AND"];
	q113 -> q79 [label="NOT"];
	q113 -> q80 [label="EQ"];
	q113 -> q81 [label="NEQ"];
	q113 -> q82 [label="MORE"];
	q113 -> q83 [label="LESS"];
	q113 -> q84 [label="TRUE"];
	q113 -> q85 [label="FALSE"];
	q113 -> q130 [label="SYMBOL"];
	q113 -> q131 [label="STRING"];
	q113 -> q132 [label="boolean_expression"];
	q113 -> q87 [label="boolean_function"];
	q113 -> q133 [label="boolean_factor"];
	q114 -> q27 [label="OCURLY"];
	q114 -> q134 [label="statement_group"];
	q115 -> q77 [label="OR"];
	q115 -> q78 [label="AND"];
	q115 -> q79 [label="NOT"];
	q115 -> q80 [label="EQ"];
	q115 -> q81 [label="NEQ"];
	q115 -> q82 [label="MORE"];
	q115 -> q83 [label="LESS"];
	q115 -> q84 [label="TRUE"];
	q115 -> q85 [label="FALSE"];
	q115 -> q130 [label="SYMBOL"];
	q115 -> q131 [label="STRING"];
	q115 -> q132 [label="boolean_expression"];
	q115 -> q87 [label="boolean_function"];
	q115 -> q135 [label="boolean_factor"];
	q116 -> q136 [label="OCURLY"];
	q116 -> q137 [label="loop_statement_group"];
	q117 -> q77 [label="OR"];
	q117 -> q78 [label="AND"];
	q117 -> q79 [label="NOT"];
	q117 -> q80 [label="EQ"];
	q117 -> q81 [label="NEQ"];
	q117 -> q82 [label="MORE"];
	q117 -> q83 [label="LESS"];
	q117 -> q84 [label="TRUE"];
	q117 -> q85 [label="FALSE"];
	q117 -> q138 [label="boolean_expression"];
	q117 -> q87 [label="boolean_function"];
	q118 -> q139 [label="OCURLY"];
	q119 -> q140 [label="CPAREN"];
	q119 -> q124 [label="PLUS"];
	q119 -> q125 [label="MINUS"];
	q121 -> q77 [label="OR"];
	q121 -> q78 [label="AND"];
	q121 -> q79 [label="NOT"];
	q121 -> q80 [label="EQ"];
	q121 -> q81 [label="NEQ"];
	q121 -> q82 [label="MORE"];
	q121 -> q83 [label="LESS"];
	q121 -> q141 [label="TRUE"];
	q121 -> q142 [label="FALSE"];
	q121 -> q94 [label="OPAREN"];
	q121 -> q95 [label="MINUS"];
	q121 -> q143 [label="SYMBOL"];
	q121 -> q144 [label="NUMBER"];
	q121 -> q145 [label="STRING"];
	q121 -> q146 [label="arith_expression"];
	q121 -> q147 [label="boolean_expression"];
	q121 -> q148 [label="string_element_list"];
	q121 -> q149 [label="string_element"];
	q121 -> q87 [label="boolean_function"];
	q121 -> q104 [label="arith_term"];
	q121 -> q105 [label="arith_factor"];
	q122 -> q150 [label="OPAREN"];
	q123 -> q77 [label="OR"];
	q123 -> q78 [label="AND"];
	q123 -> q79 [label="NOT"];
	q123 -> q80 [label="EQ"];
	q123 -> q81 [label="NEQ"];
	q123 -> q82 [label="MORE"];
	q123 -> q83 [label="LESS"];
	q123 -> q92 [label="TRUE"];
	q123 -> q93 [label="FALSE"];
	q123 -> q94 [label="OPAREN"];
	q123 -> q95 [label="MINUS"];
	q123 -> q96 [label="SYMBOL"];
	q123 -> q97 [label="NUMBER"];
	q123 -> q98 [label="STRING"];
	q123 -> q151 [label="fc_parameter_list"];
	q123 -> q100 [label="fc_parameter"];
	q123 -> q101 [label="arith_expression"];
	q123 -> q102 [label="string_expression"];
	q123 -> q103 [label="boolean_expression"];
	q123 -> q87 [label="boolean_function"];
	q123 -> q104 [label="arith_term"];
	q123 -> q105 [label="arith_factor"];
	q124 -> q94 [label="OPAREN"];
	q124 -> q95 [label="MINUS"];
	q124 -> q106 [label="SYMBOL"];
	q124 -> q97 [label="NUMBER"];
	q124 -> q152 [label="arith_term"];
	q124 -> q105 [label="arith_factor"];
	q125 -> q94 [label="OPAREN"];
	q125 -> q95 [label="MINUS"];
	q125 -> q106 [label="SYMBOL"];
	q125 -> q97 [label="NUMBER"];
	q125 -> q153 [label="arith_term"];
	q125 -> q105 [label="arith_factor"];
	q126 -> q94 [label="OPAREN"];
	q126 -> q95 [label="MINUS"];
	q126 -> q106 [label="SYMBOL"];
	q126 -> q97 [label="NUMBER"];
	q126 -> q154 [label="arith_factor"];
	q127 -> q94 [label="OPAREN"];
	q127 -> q95 [label="MINUS"];
	q127 -> q106 [label="SYMBOL"];
	q127 -> q97 [label="NUMBER"];
	q127 -> q155 [label="arith_factor"];
	q128 -> q94 [label="OPAREN"];
	q128 -> q95 [label="MINUS"];
	q128 -> q106 [label="SYMBOL"];
	q128 -> q97 [label="NUMBER"];
	q128 -> q156 [label="arith_factor"];
	q133 -> q157 [label="CPAREN"];
	q134 -> q158 [label="ELSE"];
	q134 -> q159 [label="else_clause_list"];
	q134 -> q160 [label="else_clause"];
	q135 -> q161 [label="COMMA"];
	q136 -> q1 [label="NUM"];
	q136 -> q2 [label="STRG"];
	q136 -> q3 [label="BOOL"];
	q136 -> q37 [label="RETURN"];
	q136 -> q162 [label="BREAK"];
	q136 -> q163 [label="CONT"];
	q136 -> q38 [label="IF"];
	q136 -> q39 [label="WHILE"];
	q136 -> q40 [label="FOR"];
	q136 -> q41 [label="SWITCH"];
	q136 -> q27 [label="OCURLY"];
	q136 -> q42 [label="SYMBOL"];
	q136 -> q43 [label="var_definition"];
	q136 -> q44 [label="statement_group"];
	q136 -> q164 [label="statement"];
	q136 -> q47 [label="var_assignment"];
	q136 -> q48 [label="function_call"];
	q136 -> q49 [label="if_statement"];
	q136 -> q50 [label="while_statement"];
	q136 -> q51 [label="for_statement"];
	q136 -> q52 [label="switch_statement"];
	q136 -> q165 [label="loop_statement_list"];
	q136 -> q166 [label="loop_statement"];
	q138 -> q167 [label="SCOLON"];
	q139 -> q168 [label="CASE"];
	q139 -> q169 [label="case_clause_list"];
	q139 -> q170 [label="case_clause"];
	q146 -> q124 [label="PLUS"];
	q146 -> q125 [label="MINUS"];
	q149 -> q171 [label="PLUS"];
	q150 -> q77 [label="OR"];
	q150 -> q78 [label="AND"];
	q150 -> q79 [label="NOT"];
	q150 -> q80 [label="EQ"];
	q150 -> q81 [label="NEQ"];
	q150 -> q82 [label="MORE"];
	q150 -> q83 [label="LESS"];
	q150 -> q92 [label="TRUE"];
	q150 -> q93 [label="FALSE"];
	q150 -> q94 [label="OPAREN"];
	q150 -> q95 [label="MINUS"];
	q150 -> q96 [label="SYMBOL"];
	q150 -> q97 [label="NUMBER"];
	q150 -> q98 [label="STRING"];
	q150 -> q172 [label="fc_parameter_list"];
	q150 -> q100 [label="fc_parameter"];
	q150 -> q101 [label="arith_expression"];
	q150 -> q102 [label="string_expression"];
	q150 -> q103 [label="boolean_expression"];
	q150 -> q87 [label="boolean_function"];
	q150 -> q104 [label="arith_term"];
	q150 -> q105 [label="arith_factor"];
	q152 -> q126 [label="MULT"];
	q152 -> q127 [label="DIV"];
	q152 -> q128 [label="MODULO"];
	q153 -> q126 [label="MULT"];
	q153 -> q127 [label="DIV"];
	q153 -> q128 [label="MODULO"];
	q158 -> q173 [label="OPAREN"];
	q160 -> q158 [label="ELSE"];
	q160 -> q174 [label="else_clause_list"];
	q160 -> q160 [label="else_clause"];
	q161 -> q77 [label="OR"];
	q161 -> q78 [label="AND"];
	q161 -> q79 [label="NOT"];
	q161 -> q80 [label="EQ"];
	q161 -> q81 [label="NEQ"];
	q161 -> q82 [label="MORE"];
	q161 -> q83 [label="LESS"];
	q161 -> q84 [label="TRUE"];
	q161 -> q85 [label="FALSE"];
	q161 -> q130 [label="SYMBOL"];
	q161 -> q131 [label="STRING"];
	q161 -> q132 [label="boolean_expression"];
	q161 -> q87 [label="boolean_function"];
	q161 -> q175 [label="boolean_factor"];
	q162 -> q176 [label="SCOLON"];
	q163 -> q177 [label="SCOLON"];
	q165 -> q178 [label="CCURLY"];
	q166 -> q1 [label="NUM"];
	q166 -> q2 [label="STRG"];
	q166 -> q3 [label="BOOL"];
	q166 -> q37 [label="RETURN"];
	q166 -> q162 [label="BREAK"];
	q166 -> q163 [label="CONT"];
	q166 -> q38 [label="IF"];
	q166 -> q39 [label="WHILE"];
	q166 -> q40 [label="FOR"];
	q166 -> q41 [label="SWITCH"];
	q166 -> q27 [label="OCURLY"];
	q166 -> q42 [label="SYMBOL"];
	q166 -> q43 [label="var_definition"];
	q166 -> q44 [label="statement_group"];
	q166 -> q164 [label="statement"];
	q166 -> q47 [label="var_assignment"];
	q166 -> q48 [label="function_call"];
	q166 -> q49 [label="if_statement"];
	q166 -> q50 [label="while_statement"];
	q166 -> q51 [label="for_statement"];
	q166 -> q52 [label="switch_statement"];
	q166 -> q179 [label="loop_statement_list"];
	q166 -> q166 [label="loop_statement"];
	q167 -> q94 [label="OPAREN"];
	q167 -> q95 [label="MINUS"];
	q167 -> q106 [label="SYMBOL"];
	q167 -> q97 [label="NUMBER"];
	q167 -> q180 [label="arith_expression"];
	q167 -> q104 [label="arith_term"];
	q167 -> q105 [label="arith_factor"];
	q168 -> q181 [label="OPAREN"];
	q169 -> q182 [label="CCURLY"];
	q170 -> q168 [label="CASE"];
	q170 -> q183 [label="case_clause_list"];
	q170 -> q170 [label="case_clause"];
	q171 -> q77 [label="OR"];
	q171 -> q78 [label="AND"];
	q171 -> q79 [label="NOT"];
	q171 -> q80 [label="EQ"];
	q171 -> q81 [label="NEQ"];
	q171 -> q82 [label="MORE"];
	q171 -> q83 [label="LESS"];
	q171 -> q141 [label="TRUE"];
	q171 -> q142 [label="FALSE"];
	q171 -> q94 [label="OPAREN"];
	q171 -> q95 [label="MINUS"];
	q171 -> q143 [label="SYMBOL"];
	q171 -> q144 [label="NUMBER"];
	q171 -> q145 [label="STRING"];
	q171 -> q146 [label="arith_expression"];
	q171 -> q147 [label="boolean_expression"];
	q171 -> q184 [label="string_element_list"];
	q171 -> q149 [label="string_element"];
	q171 -> q87 [label="boolean_function"];
	q171 -> q104 [label="arith_term"];
	q171 -> q105 [label="arith_factor"];
	q172 -> q185 [label="CPAREN"];
	q173 -> q77 [label="OR"];
	q173 -> q78 [label="AND"];
	q173 -> q79 [label="NOT"];
	q173 -> q80 [label="EQ"];
	q173 -> q81 [label="NEQ"];
	q173 -> q82 [label="MORE"];
	q173 -> q83 [label="LESS"];
	q173 -> q84 [label="TRUE"];
	q173 -> q85 [label="FALSE"];
	q173 -> q186 [label="boolean_expression"];
	q173 -> q87 [label="boolean_function"];
	q175 -> q187 [label="CPAREN"];
	q180 -> q188 [label="CPAREN"];
	q180 -> q124 [label="PLUS"];
	q180 -> q125 [label="MINUS"];
	q181 -> q189 [label="TRUE"];
	q181 -> q190 [label="FALSE"];
	q181 -> q191 [label="SYMBOL"];
	q181 -> q192 [label="NUMBER"];
	q181 -> q193 [label="STRING"];
	q182 -> q158 [label="ELSE"];
	q182 -> q194 [label="else_clause"];
	q186 -> q195 [label="CPAREN"];
	q188 -> q136 [label="OCURLY"];
	q188 -> q196 [label="loop_statement_group"];
	q189 -> q197 [label="CPAREN"];
	q190 -> q198 [label="CPAREN"];
	q191 -> q199 [label="CPAREN"];
	q192 -> q200 [label="CPAREN"];
	q193 -> q201 [label="CPAREN"];
	q195 -> q27 [label="OCURLY"];
	q195 -> q202 [label="statement_group"];
	q197 -> q27 [label="OCURLY"];
	q197 -> q203 [label="statement_group"];
	q198 -> q27 [label="OCURLY"];
	q198 -> q204 [label="statement_group"];
	q199 -> q27 [label="OCURLY"];
	q199 -> q205 [label="statement_group"];
	q200 -> q27 [label="OCURLY"];
	q200 -> q206 [label="statement_group"];
	q201 -> q27 [label="OCURLY"];
	q201 -> q207 [label="statement_group"];
}
